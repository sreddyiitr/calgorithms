/******************************************************************************
 * Single Linked List 
 * ==================
 * Travering Linked Lists --> example: printNodes function (done already)
 * Inserting (at end, at beginning, at a specific position)
 * Deleting (at end, at beginning, at a specific position)
 * Reversing linked list
*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node * add_at_end(struct Node *ptr, int data) {
    
    // Let's create a node that can be linked to the original linked list
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->next = NULL;
    
    //Assign the address of last element in the linked list to temp node
    ptr->next = temp;
    return temp; // here, we are returning the address of temp node (which is the last node)
}

void printList(struct Node* n)
{
    while (n != NULL) {
        printf(" %d ", n->data);
        n = n->next;
    }
}

int main()
{
    struct Node *head = (struct Node*)malloc(sizeof(struct Node));
    head->data = 1;
    head->next = NULL;
    
    struct Node* ptr = head;  // create a ptr node that is same as head node 
    
    ptr = add_at_end(ptr, 2); // the retrun node address is of temp node (which is the last node)
    ptr = add_at_end(ptr, 3); // the retrun node address is of temp node (which is the last node)
    ptr = add_at_end(ptr, 4); // the retrun node address is of temp node (which is the last node)
    
    printList(head); // here we are not passing ptr because ptr is the last node in linked list 
    
    return 0;
    
}
